$#include "duplo/py_particle_system.hpp"
$#include "duplo/py_meta_particle_system.hpp"


class PyParticleSystem @ ParticleSystem : public PyAttachment
{
	float duration();

    size_t size();

    bool load(const std::string & resource);
    void clear();
    void force(int num);
};


class PyMetaParticleSystem @ MetaParticleSystem: public PyAttachment
{
	float duration();
	uint32 nSystems();

    bool load( const std::string & resource );
    bool save( const std::string & resource );
    void force(int num = 1);
    void clear();

    void addSystem(PyParticleSystem *pPPS);
    void removeSystem(PyParticleSystem *pPPS);
    void removeAllSystems();
};


PyParticleSystem * createParticleNode(const std::string & resource);
PyMetaParticleSystem* createMetaParticleNode( const std::string& filename );

${

/* function: createParticleNode */
#define TOLUA_DISABLE_tolua_engine_createParticleNode00
static int tolua_engine_createParticleNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
	if (
		!tolua_iscppstring(tolua_S,1,0,&tolua_err) ||
		!tolua_isnoobj(tolua_S,2,&tolua_err)
		)
		goto tolua_lerror;
	else
#endif
	{
		const std::string resource = ((const std::string)  tolua_tocppstring(tolua_S,1,0));
		{
			PyParticleSystem* tolua_ret = (PyParticleSystem*)  PyParticleSystem::create(resource);
			tolua_pushusertype(tolua_S,(void*)tolua_ret,"PyParticleSystem");
			tolua_pushcppstring(tolua_S,(const char*)resource);
		}
	}
	return 2;
#ifndef TOLUA_RELEASE
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'createParticleNode'.",&tolua_err);
	return 0;
#endif
}

/* function: createMetaParticleNode */
#define TOLUA_DISABLE_tolua_engine_createMetaParticleNode00
static int tolua_engine_createMetaParticleNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
	if (
		!tolua_iscppstring(tolua_S,1,0,&tolua_err) ||
		!tolua_isnoobj(tolua_S,2,&tolua_err)
		)
		goto tolua_lerror;
	else
#endif
	{
		const std::string filename = ((const std::string)  tolua_tocppstring(tolua_S,1,0));
		{
			PyMetaParticleSystem* tolua_ret = (PyMetaParticleSystem*)  PyMetaParticleSystem::create(filename);
			tolua_pushusertype(tolua_S,(void*)tolua_ret,"PyMetaParticleSystem");
			tolua_pushcppstring(tolua_S,(const char*)filename);
		}
	}
	return 2;
#ifndef TOLUA_RELEASE
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'createMetaParticleNode'.",&tolua_err);
	return 0;
#endif
}

$}