$#include "duplo/action_matcher.h"

class ActionMatcher
{
public:
	void setBodyTwistSpeed(float speed);
	float getBodyTwistSpeed()const;

	void useEntityPitchAndRoll(bool b);
	bool useEntityPitchAndRoll()const;

	void setFootTwistSpeed(float speed);
	float getFootTwistSpeed()const;

	void setMatcherCaps(void*);
	lua_State* getMatcherCaps()const;
};

${
/* method: getMatcherCaps of class  ActionMatcher */
#define TOLUA_DISABLE_tolua_engine_ActionMatcher_getMatcherCaps00
static int tolua_engine_ActionMatcher_getMatcherCaps00(lua_State* tolua_S)
{
	tolua_Error tolua_err;
	if (
	 !tolua_isusertype(tolua_S,1,"ActionMatcher",0,&tolua_err) ||
	 !tolua_isnoobj(tolua_S,2,&tolua_err)
	)
	{
		tolua_error(tolua_S,"#ferror in function 'getMatcherCaps'.",&tolua_err);
		return 0;
	}
	
	ActionMatcher* self = (ActionMatcher*)  tolua_tousertype(tolua_S,1,0);

	Capabilities data = self->getMatcherCaps();

	lua_newtable(tolua_S);

	int n = 1;
	for ( int i = 0; i < Capabilities::s_maxCap_; ++i)
	{
		if (data.has(i))
		{
			lua_pushinteger(tolua_S, i);
			lua_rawseti(tolua_S, -2, n++);
		}
	}
	return 1;
} 

/* method: setMatcherCaps of class  ActionMatcher */
#define TOLUA_DISABLE_tolua_engine_ActionMatcher_setMatcherCaps00
static int tolua_engine_ActionMatcher_setMatcherCaps00(lua_State* tolua_S)
{
	 tolua_Error tolua_err;
	 if (
	     !tolua_isusertype(tolua_S,1,"ActionMatcher",0,&tolua_err) ||
	     !tolua_istable(tolua_S,2,0,&tolua_err) ||
	     !tolua_isnoobj(tolua_S,3,&tolua_err)
	 )
	{
		tolua_error(tolua_S,"#ferror in function 'setMatcherCaps'.",&tolua_err);
		return 0;
	}
	
	ActionMatcher* self = (ActionMatcher*)tolua_tousertype(tolua_S, 1, 0);
	Capabilities wantCaqps;

	lua_pushnil(tolua_S); 
	while (lua_next(tolua_S, -2))
	{
		lua_pushvalue(tolua_S, -2);

        const char* key = lua_tostring(tolua_S, -1);
	    lua_Number value = lua_tonumber(tolua_S, -2);

	    wantCaqps.add((int)value);
	    
	    lua_pop(tolua_S, 2);
	}

	self->setMatcherCaps(wantCaqps);

 	return 0;
}
$}
