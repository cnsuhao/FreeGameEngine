
$#include "math/vector4.hpp"
$#include "math/quat.hpp"
$#include "math/matrix.hpp"


class Vector2
{
	float x, y;

	Vector2();
	Vector2(float a, float b);

	void 	setZero( );
	void 	set( float a, float b ) ;
	void 	scale( const Vector2 &v, float s );
	float 	length() const;
	float 	lengthSquared() const;
	void 	normalise();
	Vector2 unitVector() const;

	float 	dotProduct( const Vector2& v ) const;
	float 	crossProduct( const Vector2& v ) const;

	Vector2 projectOnto( const Vector2 & v ) const;

	std::string desc() const;

	Vector2 operator +( const Vector2& v2 );
	Vector2 operator -( const Vector2& v2 );
	Vector2 operator *( float s );
	Vector2 operator /( float s );
	bool operator   ==( const Vector2& v2 );
	bool operator   < ( const Vector2& v2 );
	bool operator   <=( const Vector2& v2 );

};

bool almostEqual( const Vector2& v1, const Vector2& v2, const float epsilon = 0.0004f );


class Vector3
{
	float x, y, z;

	Vector3();
	Vector3(float a, float b, float c );

	void 	setZero();
	void 	set( float a, float b, float c );
	void 	setPitchYaw( float pitchInRadians, float yawInRadians );

	float 	dotProduct( const Vector3& v ) const;
	Vector3 crossProduct( const Vector3 & v ) const;
	void 	lerp( const Vector3 & v1, const Vector3 & v2, float alpha );
	void 	clamp( const Vector3 & lower, const Vector3 & upper );
	Vector3 projectOnto( const Vector3 & v ) const;

	float 	length() const;
	float 	lengthSquared() const;
	void 	normalise();
	Vector3 unitVector() const;

	float 	yaw() const;
	float 	pitch() const;

	std::string desc() const;

	Vector3 operator +( const Vector3& v2 ) const;
    Vector3 operator -( const Vector3& v2 ) const;
    Vector3 operator *( float s ) const;
    Vector3 operator /( float s ) const;
    bool operator   ==( const Vector3& v2 ) const;
    bool operator   < ( const Vector3& v2 ) const;

};


class Vector4
{
	float x, y, z, w;

	Vector4();
	Vector4( float a, float b, float c, float d );

	void 	setZero();
	void 	set( float a, float b, float c, float d ) ;
	void 	scale( const Vector4& v, float s );
	void 	scale( float s );
	void 	parallelMultiply( const Vector4& v );
	float 	length() const;
	float 	lengthSquared() const;
	void 	normalise();
	Vector4 unitVector() const;
	Vector3 dropW() const;

	float 	dotProduct( const Vector4& v ) const;

	Vector4 operator +( const Vector4& v2 ) const;
    Vector4 operator -( const Vector4& v2 ) const;
    Vector4 operator /( const Vector4& v2 ) const;
    Vector4 operator *( float s ) const;
    Vector4 operator /( float s ) const;
    bool operator   ==( const Vector4& v2 ) const;
    bool operator   < ( const Vector4& v2 ) const;
};


class Quaternion
{
	float x, y, z, w;

	Quaternion();
	Quaternion( float x, float y, float z, float w );
	
	void			setZero();
    void            setIdentity();
	void			set( float x, float y, float z, float w );
	void			set @ setVector3 ( const Vector3 &v, float w );
	void			set @ setVector4 ( const Vector4 &v );
	void			set @ setQuaternion ( const Quaternion & other );

	void			fromAngleAxis( float angle, const Vector3 &axis );
	void			fromYawPitchRoll( float yaw, float pitch, float roll );
	Vector3			asYawPitchRoll() const;

	void			fromMatrix( const Matrix &m );

	void			normalise();
	void			invert();
	void			minimise();

	void			slerp( const Quaternion& qStart, const Quaternion &qEnd,
							float t );

	void			multiply( const Quaternion& q1, const Quaternion& q2 );
	void			preMultiply( const Quaternion& q );
	void			postMultiply( const Quaternion& q );

	float			dotProduct( const Quaternion& q ) const;
	float			length() const;
	float			lengthSquared() const;
};


class Matrix
{
	float m00, m01, m02, m03;
	float m10, m11, m12, m13;
	float m20, m21, m22, m23;
	float m30, m31, m32, m33;

	Matrix();
	Matrix(const Matrix & mat);

	void	setZero();
	void	setIdentity();

	void	setScale( const Vector3 & scale );
	void	setTranslate( const Vector3 & pos );
	void	setRotate( const Quaternion & q );

	void	setRotateX( const float angle );
	void	setRotateY( const float angle );
	void	setRotateZ( const float angle );

	void	setRotate @ setYawPitchRoll( float yaw, float pitch, float roll );
	void	setRotateInverse( float yaw, float pitch, float roll );

	void	multiply( const Matrix& m1, const Matrix& m2 );
	void	preMultiply( const Matrix& m );
	void	postMultiply( const Matrix& m );

	void	invertOrthonormal();
	bool	invert();
	float	getDeterminant() const;

	void	transpose();

	void	lookAt( const Vector3& position,
				const Vector3& direction, const Vector3& up );

	Vector3	applyPoint( const Vector3& v2 ) const;
	Vector3	applyVector( const Vector3& v2 ) const;

	const Vector3 & applyToUnitAxisVector( int axis ) const;
	const Vector3 & applyToOrigin() const;

	void	element @ setElement( int i, int j, float value );
    float   element @ getElement( int i, int j) const;

	void 	row @ setRow( int i, const Vector4 & value );
	const Vector4& 	row @ getRow( int i ) const;

	Vector4 column @ getColumn( int i ) const;
	void 	column @ setColumn( int i, const Vector4 & v );

	void preRotateX(const float angle);
	void preRotateY(const float angle);
	void preRotateZ(const float angle);
	void preTranslateBy(const Vector3 & v);

	void postRotateX(const float angle);
	void postRotateY(const float angle);
	void postRotateZ(const float angle);
	void postTranslateBy(const Vector3 & v);

	bool isMirrored() const;

	void orthogonalProjection( float w, float h, float zn, float zf );
	void perspectiveProjection( float fov, float aspectRatio, 
		float nearPlane, float farPlane );
    void perspectiveProjectionGL( float fov, float aspectRatio,
        float nearPlane, float farPlane );

	void translation( const Vector3& v );

	float yaw() const;
	float pitch() const;
	float roll() const;

    void decompose(Quaternion & rotation, Vector3 & scale, Vector3 & translate) const;
};
