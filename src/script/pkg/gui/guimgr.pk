$#include "util/keycodes.h"

class Gui
{
	void initialise(const std::string & _core);
	void shutdown();

	Widget* createWidgetT @ createWidget(
		const std::string& _type,
		const std::string& _skin,
		const IntCoord& _coord,
		Align _align,
		const std::string& _layer,
		const std::string& _name
		);

	Widget* createWidgetRealT @ createWidgetReal(
		const std::string& _type, 
		const std::string& _skin, 
		const FloatCoord& _coord, 
		Align _align, 
		const std::string& _layer, 
		const std::string& _name
		);
	
	void destroyWidget(Widget* _widget);

    Widget* findWidgetByPathT @ findWidget(const char * _path);

	void destroyChildWidget(Widget* _widget);
	void destroyAllChildWidget();
};

${
Gui * guiInstance()
{
	return Gui::getInstancePtr();
}

inline bool injectKeyPress(int sdl_scancode)
{
    MyGUI::KeyCode::Enum key = ora::KeyCode::sdl2mygui((SDL_Scancode) sdl_scancode);
	return MyGUI::InputManager::getInstance().injectKeyPress(key);
}

inline bool injectKeyRelease(int sdl_scancode)
{
    MyGUI::KeyCode::Enum key = ora::KeyCode::sdl2mygui((SDL_Scancode)sdl_scancode);
    return MyGUI::InputManager::getInstance().injectKeyRelease(key);
}
inline bool injectMousePress(int x, int y, int btn)
{
	return MyGUI::InputManager::getInstance().injectMousePress(
		x, y, MyGUI::MouseButton::Enum(btn));
}
inline bool injectMouseMove(int x, int y, int btn)
{
	return MyGUI::InputManager::getInstance().injectMouseMove(
		x, y, MyGUI::MouseButton::Enum(btn));
}
inline bool injectMouseRelease(int x, int y, int btn)
{
	return MyGUI::InputManager::getInstance().injectMouseRelease(
		x, y, MyGUI::MouseButton::Enum(btn));
}
$}

Gui * guiInstance();

module GUI
{
	bool injectKeyPress(int key);
	bool injectKeyRelease(int key);

	bool injectMousePress(int x, int y, int btn);
	bool injectMouseMove(int x, int y, int btn);
	bool injectMouseRelease(int x, int y, int btn);
}
