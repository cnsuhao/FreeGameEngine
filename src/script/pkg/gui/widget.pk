

class Widget
{
	Widget* createWidgetT @ createWidget(
		const std::string& _type,
		const std::string& _skin,
		const IntCoord& _coord,
		Align _align,
		const std::string& _name
	);

	Widget* createWidgetRealT @ createWidgetReal(
		const std::string& _type,
		const std::string& _skin,
		const FloatCoord& _coord,
		Align _align,
		const std::string& _name
	);

	bool isUserString(const std::string& _key) const;
	void setUserString(const std::string& _key, const std::string& _value);
	const std::string& getUserString(const std::string& _key) const;
	bool clearUserString @ delUserString(const std::string& _key);

	void* getUserStrings() const;
	void clearUserStrings();

	void setUserData(void* _data);
	void* getUserData() const;


	IntPoint getPosition() const;
	IntSize getSize() const;
	const IntCoord& getCoord() const;

	const IntPoint& getAbsolutePosition() const;
	IntRect getAbsoluteRect() const;
	IntCoord getAbsoluteCoord() const;

	int getAbsoluteLeft() const;
	int getAbsoluteTop() const;

	int getLeft() const;
	int getRight() const;
	int getTop() const;
	int getBottom() const;
	int getWidth() const;
	int getHeight() const;


	void setPosition(int _left, int _top);
	void setSize(int _width, int _height);
	void setCoord(int _left, int _top, int _width, int _height);

	void setRealPosition(float _left, float _top);
	void setRealSize(float _width, float _height);
	void setRealCoord(float _left, float _top, float _width, float _height);


	const std::string& getName() const;
	void setName(const std::string & name);

	virtual void setVisible(bool _value);
	bool getVisible() const;

	virtual void setAlign(Align _value);
	Align getAlign() const;

	void setAlpha(float _value);
	float getAlpha() const;


	void setColour(const Colour& _value);

	bool isRootWidget() const;

	Widget* getParent() const;

	IntSize getParentSize() const;

	size_t getChildCount();
	Widget* getChildAt(size_t _index);
    Widget* findWidgetByPath @ findWidget(const char * _path);

	void setEnabled(bool _value);
	bool getEnabled() const;

	IntCoord getClientCoord();
	Widget* getClientWidget();

	void detachFromWidget(const std::string& _layer /*= ""*/);
	void attachToWidget(Widget* _parent, WidgetStyle _style, const std::string& _layer /*= ""*/);

	void changeWidgetSkin(const std::string& _skinName);

	void setWidgetStyle(WidgetStyle _style, const std::string& _layer/* = ""*/);
	WidgetStyle getWidgetStyle() const;

	void doLayout();

	tolua_outside void widget_addEvent_setFocus @ addEventMouseSetFocus(lua_State * L, lua_Function funID);
	tolua_outside void widget_delEvent_setFocus @ delEventMouseSetFocus(void *p);

	tolua_outside void widget_addEvent_lostFocus @ addEventMouseLostFocus(lua_State * L, lua_Function funID);
	tolua_outside void widget_delEvent_lostFocus @ delEventMouseLostFocus(void *p);

	tolua_outside void widget_addEvent_buttonClick @ addEventMouseButtonClick(lua_State * L, lua_Function funID);
	tolua_outside void widget_delEvent_buttonClick @ delEventMouseButtonClick(void *p);
};


${
/* method: getUserStrings of class  UserData */
#define TOLUA_DISABLE_tolua_gui_Widget_getUserStrings00
static int tolua_gui_Widget_getUserStrings00(lua_State* tolua_S)
{
    const UserData* self = (const UserData*)  tolua_tousertype(tolua_S,1,0);
    if (self)
    {
        const MapString & strings = self->getUserStrings();
        LuaPlus::LuaObject obj(tolua_S);
        LuaPlus::LuaObject table = obj.CreateTable("_Widget_user_data");
        for(auto v : strings)
        {
            table.SetString(v.first.c_str(), v.second.c_str());
        }
        table.Push();
        return 1;
    }
	return 0;
}

/* method: setUserData of class  UserData */
#define TOLUA_DISABLE_tolua_gui_Widget_setUserData00
static int tolua_gui_Widget_setUserData00(lua_State* tolua_S)
{
    UserData* self = (UserData*)  tolua_tousertype(tolua_S,1,0);
    if (self)
    {
        LuaPlus::LuaObject obj(tolua_S, 2);
        self->setUserData(obj);
    }
	return 0;
}

/* method: getUserData of class  UserData */
#define TOLUA_DISABLE_tolua_gui_Widget_getUserData00
static int tolua_gui_Widget_getUserData00(lua_State* tolua_S)
{
    const UserData* self = (const UserData*)  tolua_tousertype(tolua_S,1,0);
    if (self)
    {
        LuaPlus::LuaObject *p = self->getUserData<LuaPlus::LuaObject>();
        if(p != nullptr)
        {
            p->Push();
        }
        else
        {
            lua_pushnil(tolua_S);
        }
        return 1;
    }
    return 0;
}
$}

