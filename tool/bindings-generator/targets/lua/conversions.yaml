definitions:
    # the names of the functions - we use this to generate the code and to register the functions in
    # the javascript class
    ifunction: "lua_${generator.prefix}_${class_name}_${func_name}"
    sfunction: "lua_${generator.prefix}_${class_name}_${func_name}"
    constructor: "lua_${generator.prefix}_${class_name}_constructor"

conversions:
    # some times you want to use a special native type when converting from spidermonkey to native
    # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
    # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
    native_types:
        "float": "double"
        "short": "int32_t"
        "unsigned char": "uint16_t"
        "char": "int32_t"
        "@std::vector<std::basic_string.*>.>.>": "std::vector<std::string>"
        "@std::vector<int.*>.>": "std::vector<int>"

    ns_map:
        "ora::": "frg."

    to_native:
        # lua to native
        "int": "ok &= luaval_to_int32(tolua_S, ${arg_idx},(int *)&${out_value}, lua_fun_name)"
        "unsigned int": "ok &= luaval_to_uint32(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "char": "ok &= luaval_to_int32(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "unsigned char": "ok &= luaval_to_uint16(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "short": "ok &= luaval_to_int32(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "unsigned short": "ok &= luaval_to_ushort(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "bool": "ok &= luaval_to_boolean(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "float": "ok &= luaval_to_number(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "double": "ok &= luaval_to_number(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "long": "ok &= luaval_to_long(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "unsigned long": "ok &= luaval_to_ulong(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "size_t": "ok &= luaval_to_ssize(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "ssize_t": "ok &= luaval_to_ssize(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "long long": "ok &= luaval_to_long_long(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "std::string": "ok &= luaval_to_string(tolua_S, ${arg_idx},&${out_value}, lua_fun_name)"
        "char*": "std::string ${out_value}_tmp; ok &= luaval_to_string(tolua_S, ${arg_idx}, &${out_value}_tmp, lua_fun_name); ${out_value} = ${out_value}_tmp.c_str()"
        "Vector2": "ok &= luaval_to_vec2(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "Vector3": "ok &= luaval_to_vec3(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "Vector4": "ok &= luaval_to_vec4(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "Quaternion": "ok &= luaval_to_quaternion(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "Matrix": "ok &= luaval_to_matrix(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "@vector<std::basic_string.*>": "ok &= luaval_to_vector_string(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "@vector<int.*>": "ok &= luaval_to_vector_int(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "@vector<float.*>": "ok &= luaval_to_vector_float(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "@vector<unsigned short.*>": "ok &= luaval_to_vector_ushort(tolua_S, ${arg_idx}, &${out_value}, lua_fun_name)"
        "@SmartPtr<.*>": "ok &= luaval_to_smartptr(tolua_S, ${arg_idx}, &${out_value}, nullptr)"
        "object": "ok &= luaval_to_object(tolua_S, ${arg_idx}, &${out_value}, \"${scriptname}\")"

    from_native:
        # native to lua
        "char": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "unsigned char": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "short": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "unsigned int": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "int": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "unsigned short": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "long long": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "std::string": "tolua_pushcppstring(tolua_S,${in_value})"
        "char*": "tolua_pushstring(tolua_S,(const char*)${in_value})"
        "bool": "tolua_pushboolean(tolua_S,(bool)${in_value})"
        "float": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "double": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "long": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "unsigned long": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "size_t": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "ssize_t": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
        "Vector2": "vec2_to_luaval(tolua_S, ${in_value})"
        "Vector3": "vec3_to_luaval(tolua_S, ${in_value})"
        "Vector4": "vec4_to_luaval(tolua_S, ${in_value})"
        "Quaternion": "quaternion_to_luaval(tolua_S, ${in_value})"
        "Matrix": "matrix_to_luaval(tolua_S, ${in_value})"
        "@vector<std::basic_string.*>": "vector_string_to_luaval(tolua_S, ${in_value})"
        "@vector<int.*>": "vector_int_to_luaval(tolua_S, ${in_value})"
        "@vector<float.*>": "vector_float_to_luaval(tolua_S, ${in_value})"
        "@vector<unsigned short.*>": "vector_ushort_to_luaval(tolua_S, ${in_value})"

        "@SmartPtr<.*>": "object_to_luaval(tolua_S, ${in_value}.get(), nullptr)"
        "object": "object_to_luaval(tolua_S, ${in_value}, \"${scriptname}\")"

